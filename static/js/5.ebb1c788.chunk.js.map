{"version":3,"sources":["hooks/useSearchWeatherLocation.ts","hooks/useLocalLocation.ts","hooks/useIp.ts","hooks/useLocationByIP.ts","hooks/useLocationSearchParams.ts","hooks/useCurrentWeather.ts","containers/weather/dashboard/styles.ts","containers/weather/dashboard/index.tsx"],"names":["selector","metaWeather","weatherSearchLocation","useSearchWeatherLocation","value","field","useActions","metaWeatherActions","searchWeatherLocation","useEffect","useShallowEqualSelector","useLocalLocation","useState","location","setLocation","error","setError","handleGetLocationSuccess","useCallback","position","latt","coords","latitude","long","longitude","handleGetLocationError","toastService","notify","message","global","navigator","geolocation","getCurrentPosition","enableHighAccuracy","timeout","maximumAge","ip","loading","data","useIp","ipActions","detectIp","state","geoLocation","useLocationByIP","geoLocationActions","detectGeoLocation","detectLocationByIP","useLocationSearchParams","localLocation","localLocationError","ipDetecting","locationByIp","locationSearchParams","setLocationSearchParams","undefined","lat","lng","some","Boolean","useCurrentWeather","params","searchingWeatherLocation","woeid","useMemo","weatherAtLocationState","useWeatherAtLocation","ipLocationLoading","useStyles","makeStyles","theme","createStyles","root","classNamePrefix","DashboardComponent","isMounted","useIsMounted","classes","useResetWeatherAtLocation","Box","className","Dashboard","memo","displayName"],"mappings":"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","file":"static/js/5.ebb1c788.chunk.js","sourcesContent":["import { useEffect } from 'react';\nimport { metaWeatherActions } from 'states/metaWeather';\nimport { RootState } from 'states/store';\nimport { SearchLocationPayload } from 'services/metaWeather';\nimport useActions from './useActions';\nimport useShallowEqualSelector from './useShallowEqualSelector';\n\nconst selector = ({ metaWeather }: RootState) =>\n  metaWeather.weatherSearchLocation;\n\nconst useSearchWeatherLocation = (\n  value?: SearchLocationPayload['value'],\n  field?: SearchLocationPayload['field'],\n) => {\n  const [searchWeatherLocation] = useActions(\n    metaWeatherActions.searchWeatherLocation,\n  );\n\n  useEffect(() => {\n    if (field && value) {\n      searchWeatherLocation({ field, value });\n    }\n  }, [value, field, searchWeatherLocation]);\n\n  return useShallowEqualSelector(selector);\n};\n\nexport default useSearchWeatherLocation;\n","import { useCallback, useEffect, useState } from 'react';\nimport toastService from 'services/toast';\n\nconst useLocalLocation = () => {\n  const [location, setLocation] = useState<SimpleLocation>();\n  const [error, setError] = useState<GeolocationPositionError>();\n  const handleGetLocationSuccess = useCallback(\n    (position: GeolocationPosition) => {\n      setLocation({\n        latt: position.coords.latitude,\n        long: position.coords.longitude,\n      });\n    },\n    [],\n  );\n  const handleGetLocationError = useCallback(\n    (error: GeolocationPositionError) => {\n      setError(error);\n      toastService.notify(error.message, 'error');\n    },\n    [],\n  );\n\n  useEffect(() => {\n    if (global.navigator.geolocation) {\n      toastService.notify('Detecting local location', 'info');\n      global.navigator.geolocation.getCurrentPosition(\n        handleGetLocationSuccess,\n        handleGetLocationError,\n        {\n          enableHighAccuracy: true,\n          timeout: 5000,\n          maximumAge: 0,\n        },\n      );\n    }\n  }, [handleGetLocationError, handleGetLocationSuccess]);\n\n  return { location, error };\n};\n\nexport default useLocalLocation;\n\nexport interface SimpleLocation {\n  latt: number;\n  long: number;\n}\n","import { ipActions } from 'states/ip';\nimport { RootState } from 'states/store';\nimport useActions from './useActions';\nimport useShallowEqualSelector from './useShallowEqualSelector';\n\nconst selector = ({ ip: { loading, data, message } }: RootState) => {\n  return {\n    loading,\n    ip: data?.ip,\n    message,\n  };\n};\n\nconst useIp = () => {\n  const [detectIp] = useActions(ipActions.detectIp);\n  const state = useShallowEqualSelector(selector);\n\n  return {\n    ...state,\n    detectIp,\n  };\n};\n\nexport default useIp;\n","import { RootState } from 'states/store';\nimport useShallowEqualSelector from './useShallowEqualSelector';\nimport { geoLocationActions } from 'states/geoLocation';\nimport useActions from './useActions';\n\nconst selector = ({ geoLocation: { loading, data, message } }: RootState) => ({\n  loading,\n  location: data?.location,\n  message,\n});\n\nconst useLocationByIP = () => {\n  const [detectLocationByIP] = useActions(geoLocationActions.detectGeoLocation);\n  const state = useShallowEqualSelector(selector);\n  return {\n    ...state,\n    detectLocationByIP,\n  };\n};\n\nexport default useLocationByIP;\n","import { useState, useEffect } from 'react';\nimport useLocalLocation from './useLocalLocation';\nimport { SearchLocationPayload } from '../services/metaWeather';\nimport useIp from './useIp';\nimport useLocationByIP from './useLocationByIP';\nimport toastService from 'services/toast';\n\n/**\n * Compute Meta weather search location params\n * Case 1: Using local location provided by browser\n * Case 2: Detect IP & detect location by IP\n */\nconst useLocationSearchParams = () => {\n  const {\n    location: localLocation,\n    error: localLocationError,\n  } = useLocalLocation();\n  const { ip, detectIp, loading: ipDetecting } = useIp();\n  const { detectLocationByIP, location: locationByIp } = useLocationByIP();\n\n  const [locationSearchParams, setLocationSearchParams] = useState<\n    SearchLocationPayload\n  >();\n\n  useEffect(() => {\n    // Case 1: Detect local location provided by browser success\n    if (localLocation) {\n      setLocationSearchParams({\n        field: 'lattlong',\n        value: `${localLocation.latt},${localLocation.long}`,\n      });\n    }\n\n    // Case 2: Detect IP => detect location by IP\n    /**\n     * In case `localLocationError` and still not call detect IP\n     * => Call API to detect IP\n     */\n    if (localLocationError && ipDetecting === undefined) {\n      detectIp();\n      toastService.notify('Detecting location by IP', 'info');\n    }\n\n    /**\n     * In case having IP\n     * => Call API to detect location via IP\n     */\n    if (ip) {\n      detectLocationByIP(ip);\n    }\n  }, [\n    detectIp,\n    detectLocationByIP,\n    ip,\n    ipDetecting,\n    localLocation,\n    localLocationError,\n  ]);\n\n  // Detect location by IP success\n  useEffect(() => {\n    if (locationByIp && !localLocation) {\n      setLocationSearchParams({\n        field: 'lattlong',\n        value: `${locationByIp.lat},${locationByIp.lng}`,\n      });\n    }\n  }, [localLocation, locationByIp]);\n\n  return locationSearchParams;\n};\n\nexport default useLocationSearchParams;\n","import { useMemo } from 'react';\nimport { RootState } from 'states/store';\nimport useLocationSearchParams from './useLocationSearchParams';\nimport useSearchWeatherLocation from './useSearchWeatherLocation';\nimport useWeatherAtLocation from './useWeatherAtLocation';\nimport useShallowEqualSelector from './useShallowEqualSelector';\n\nconst selector = ({ ip, geoLocation }: RootState) => {\n  const ipLocationLoading = [ip.loading, geoLocation.loading].some(Boolean);\n  return ipLocationLoading;\n};\n\n/**\n * Get current weather of user by detecting user location\n */\nconst useCurrentWeather = () => {\n  const params = useLocationSearchParams();\n  const { data, loading: searchingWeatherLocation } = useSearchWeatherLocation(\n    params?.value,\n    params?.field,\n  );\n  const woeid = useMemo(() => data?.[0]?.woeid, [data]);\n  const weatherAtLocationState = useWeatherAtLocation(woeid);\n  const ipLocationLoading = useShallowEqualSelector(selector);\n\n  return {\n    ...weatherAtLocationState,\n    loading: [\n      searchingWeatherLocation,\n      weatherAtLocationState.loading,\n      ipLocationLoading,\n    ].some(Boolean),\n  };\n};\n\nexport default useCurrentWeather;\n","import { makeStyles, createStyles, Theme } from '@material-ui/core';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      position: 'relative',\n    },\n  });\n\nconst useStyles = makeStyles(styles, { classNamePrefix: 'WeatherApp' });\n\nexport default useStyles;\n","import React, { memo } from 'react';\nimport { Box } from '@material-ui/core';\nimport useCurrentWeather from 'hooks/useCurrentWeather';\nimport useResetWeatherAtLocation from 'hooks/useResetWeatherAtLocation';\nimport CityWeather from 'components/weather/city-weather';\nimport LoadingPage from 'components/common/loading-page';\nimport useStyles from './styles';\nimport useIsMounted from 'hooks/useIsMounted';\n\nexport const DashboardComponent: React.FC = () => {\n  const { loading, data } = useCurrentWeather();\n  const isMounted = useIsMounted();\n  const classes = useStyles();\n\n  // Refresh weather at location\n  useResetWeatherAtLocation();\n\n  return (\n    <Box data-testid=\"Dashboard\" className={classes.root}>\n      {(loading || !isMounted) && <LoadingPage />}\n      {data && <CityWeather data={data} />}\n    </Box>\n  );\n};\n\nconst Dashboard = memo(DashboardComponent);\nDashboard.displayName = 'Dashboard';\n\nexport default Dashboard;\n"],"sourceRoot":""}
{"version":3,"sources":["hooks/useQuery.ts","services/ip.ts","states/ip.ts","services/geoLocation.ts","states/geoLocation.ts","utils/state/createStore.ts","states/store.ts","theme.ts","routes/history.ts","hooks/useToast.ts","components/common/toast/index.tsx","components/common/toast/utils.ts","routes/index.ts","routes/Routes/index.tsx","components/app/weather/styles.ts","components/app/weather/index.tsx","App.styles.ts","App.tsx","reportWebVitals.ts","index.tsx","constants/common.ts","utils/string.ts","utils/routes/paths.ts","routes/paths.ts","utils/common.ts","services/eventListener.ts","services/toast.ts","services/base.ts","utils/state/createSliceObject.ts","utils/state/createReducerObject.ts","utils/state/createSlice.ts","ui/Spin/styles.ts","ui/Spin/index.tsx","components/common/loading-page/styles.ts","components/common/loading-page/index.tsx","services/metaWeather.ts","states/metaWeather.ts"],"names":["useQuery","location","useLocation","useMemo","params","URLSearchParams","search","Object","fromEntries","entries","ipService","baseURL","detect","requestData","url","method","BaseService","ipSlice","createSlice","name","initialState","reducers","detectIp","state","loading","detectSuccess","ipData","data","detectFailed","error","undefined","workers","handleDetectIp","call","service","res","isSuccessResponse","put","ipActions","actions","geoLocationService","ip","apiKey","GEO_ACCESS_KEY","ipAddress","cacheKey","geoLocationSlice","detectGeoLocation","_ip","geoLocationData","handleDetectGeoLocation","payload","geoLocationActions","isSliceObject","o","saga","createStore","slices","rootReducer","combineReducers","map","reducer","createRootReducer","rootState","createRootState","rootSaga","all","values","filter","fork","createRootSaga","sagaMiddleware","createSagaMiddleware","enhancer","composeEnhancer","compose","applyMiddleware","store","reduxCreateStore","run","geoLocation","metaWeather","theme","createMuiTheme","palette","primary","main","blue","secondary","lightBlue","typography","caption","fontSize","history","createBrowserHistory","basename","process","console","log","baseToastOptions","preventDuplicate","anchorOrigin","vertical","horizontal","useToast","useSnackbar","enqueueSnackbar","closeSnackbar","showToast","useCallback","message","variant","options","hideToast","key","ToastComponent","useEffect","toastService","addListener","removeListener","useToastEffect","Toast","memo","displayName","routes","weatherPaths","dashboard","component","lazy","childRoutes","weatherSearch","weatherCity","flattenRoutes","collectedRoutes","forEach","route","push","RoutesComponent","allRoutes","fallback","path","exact","props","from","to","Routes","useStyles","makeStyles","createStyles","root","position","padding","spacing","flexGrow","title","textDecoration","color","common","white","display","breakpoints","up","grow","down","borderRadius","shape","backgroundColor","fade","marginLeft","width","searchIcon","height","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","paddingLeft","transition","transitions","create","classNamePrefix","WeatherAppComponent","inputRef","React","createRef","classes","useHistory","query","handleSubmit","e","preventDefault","searchPath","current","value","pathname","includes","Box","data-testid","className","AppBar","Toolbar","generatePath","Typography","noWrap","onSubmit","InputBase","autoComplete","placeholder","input","inputProps","defaultValue","WeatherApp","NotFoundPage","App","ThemeProvider","maxSnack","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Sentry","dsn","SENTRY_DSN","autoSessionTracking","release","pkg","version","integrations","Integrations","BrowserTracing","tracesSampleRate","ReactDOM","render","document","getElementById","NETWORK_TIMEOUT","NETWORK_TIMEOUT_MESSAGE","DATE_FORMAT","TIME_ZONE","INVALID_WOEID_MESSAGE","META_WEATHER_PROXY_URL","REACT_APP_META_WEATHER_PROXY_URL","splitter","separator","transformWord","toKebabCase","w","toLowerCase","text","split","join","basePath","init","String","toString","createPathWithSearch","woeid","pathRule","rest","assign","kind","EventListener","listeners","listener","this","args","index","findIndex","l","splice","updateEventListener","raiseEvent","getErrorCodeAndMessage","code","response","status","config","instance","cachedResponses","transformData","a","shouldNotifyError","shouldNotifySuccess","timeout","timeoutErrorMessage","cachedRes","request","match","resData","resultData","notify","successRes","Axios","createActionType","createSliceObject","extraReducer","keys","type","caseReducers","slicer","action","reduce","intermediateState","worker","Boolean","watchWorker","watch","takeLatest","createReducerObject","settings","isSliceSettings","childrenWrapper","opacity","progressWrapper","top","left","zIndex","modal","SpinComponent","children","wrapperClassName","clsx","CircularProgress","Spin","bottom","right","black","LoadingPageComponent","size","LoadingPage","today","dayjs","format","metaWeatherService","headers","authorization","field","get","metaWeatherSlice","weatherAtLocation","weatherSearchLocation","getWeatherAtLocation","_woeid","resetWeatherSearch","resetWeatherAtLocation","getWeatherAtLocationSuccess","weatherAtLocationData","getWeatherAtLocationFailed","errorData","searchWeatherLocation","_payload","searchWeatherLocationSuccess","weatherSearchLocationData","searchWeatherLocationFailed","handleSearchWeatherLocation","handleGetWeatherAtLocation","metaWeatherActions"],"mappings":"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","file":"static/js/main.3346b901.chunk.js","sourcesContent":["import { useMemo } from 'react';\nimport { useLocation } from 'react-router';\n\nconst useQuery = () => {\n  const location = useLocation();\n  const query = useMemo(() => {\n    const params = new URLSearchParams(location.search);\n    return Object.fromEntries(params.entries());\n  }, [location.search]);\n  return query;\n};\n\nexport default useQuery;\n","import { IpResponseData } from 'types/ip';\nimport BaseService from './base';\n\nclass IpService extends BaseService {\n  constructor() {\n    super({\n      baseURL: `https://api.ipify.org`,\n    });\n  }\n  detect = () => {\n    return this.requestData<IpResponseData>({\n      url: '/?format=json',\n      method: 'GET',\n    });\n  };\n}\n\nconst ipService = new IpService();\nexport default ipService;\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { call, put } from 'redux-saga/effects';\nimport service from 'services/ip';\nimport { IpResponseData, IpState } from 'types/ip';\nimport { BaseResponse, ServiceErrorState } from 'types/common';\nimport { isSuccessResponse } from 'utils/common';\nimport createSlice from 'utils/state/createSlice';\n\nconst initialState: IpState = {};\n\nconst ipSlice = createSlice({\n  name: 'ip',\n  initialState,\n  reducers: {\n    detectIp: (state: IpState) => ({\n      ...state,\n      loading: true,\n    }),\n    detectSuccess: (state: IpState, ipData: IpResponseData) => ({\n      ...state,\n      data: ipData,\n      loading: false,\n    }),\n    detectFailed: (state: IpState, error: ServiceErrorState) => ({\n      ...state,\n      ...error,\n      data: undefined,\n      loading: false,\n    }),\n  },\n  workers: {\n    detectIp: ({ detectSuccess, detectFailed }) =>\n      function* handleDetectIp() {\n        const res = (yield call(\n          service.detect,\n        )) as BaseResponse<IpResponseData>;\n\n        if (isSuccessResponse(res)) {\n          yield put(detectSuccess(res.data));\n        } else {\n          yield put(detectFailed(res.data));\n        }\n      },\n  },\n});\n\nexport default ipSlice;\nexport const { actions: ipActions } = ipSlice;\n","import { LocationResponseData } from 'types/geoLocation';\nimport { GEO_ACCESS_KEY } from 'constants/common';\nimport BaseService from './base';\n\nclass GeoLocationService extends BaseService {\n  constructor() {\n    super({\n      baseURL: 'https://ip-geolocation.whoisxmlapi.com',\n    });\n  }\n\n  detect = (ip: string) => {\n    const params = new URLSearchParams({\n      apiKey: GEO_ACCESS_KEY,\n      ipAddress: ip,\n    });\n    return this.requestData<LocationResponseData>({\n      url: `/api/v1?${params}`,\n      method: 'GET',\n      cacheKey: ip, // Cache response by ip\n    });\n  };\n}\n\nconst geoLocationService = new GeoLocationService();\nexport default geoLocationService;\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { call, put } from 'redux-saga/effects';\nimport service from 'services/geoLocation';\nimport { LocationResponseData, GeoLocationState } from 'types/geoLocation';\nimport { BaseResponse, ServiceErrorState } from 'types/common';\nimport { isSuccessResponse } from 'utils/common';\nimport createSlice from 'utils/state/createSlice';\n\nconst initialState: GeoLocationState = {};\n\nconst geoLocationSlice = createSlice({\n  name: 'geoLocation',\n  initialState,\n  reducers: {\n    detectGeoLocation: (state: GeoLocationState, _ip: string) => ({\n      ...state,\n      loading: true,\n    }),\n    detectSuccess: (\n      state: GeoLocationState,\n      geoLocationData: LocationResponseData,\n    ) => ({\n      ...state,\n      data: geoLocationData,\n      loading: false,\n    }),\n    detectFailed: (state: GeoLocationState, error: ServiceErrorState) => ({\n      ...state,\n      ...error,\n      data: undefined,\n      loading: false,\n    }),\n  },\n  workers: {\n    detectGeoLocation: ({ detectSuccess, detectFailed }) =>\n      function* handleDetectGeoLocation({ payload: ip }) {\n        const res = (yield call(\n          service.detect,\n          ip,\n        )) as BaseResponse<LocationResponseData>;\n\n        if (isSuccessResponse(res)) {\n          yield put(detectSuccess(res.data));\n        } else {\n          yield put(detectFailed(res.data));\n        }\n      },\n  },\n});\n\nexport default geoLocationSlice;\nexport const { actions: geoLocationActions } = geoLocationSlice;\n","import {\n  applyMiddleware,\n  combineReducers,\n  compose,\n  createStore as reduxCreateStore,\n  Reducer,\n  AnyAction,\n  PreloadedState,\n} from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { all, fork } from 'redux-saga/effects';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { SliceObject, ReducerObject } from 'types/state';\n\nconst isSliceObject = (\n  o: SliceObject<string, any, any> | ReducerObject<string, any>,\n): o is SliceObject<string, any, any> =>\n  o && !!(o as SliceObject<string, any, any>).saga;\n\nconst createRootReducer = <TSlices extends SlicesBase>(slices: TSlices) =>\n  (combineReducers(\n    Object.fromEntries(\n      Object.entries(slices).map(([key, { reducer }]) => [key, reducer]),\n    ),\n  ) as unknown) as Reducer<RootState<TSlices>, AnyAction>;\n\nconst createRootSaga = <TSlices extends SlicesBase>(slices: TSlices) =>\n  function* rootSaga() {\n    yield all(\n      Object.values(slices)\n        .filter(isSliceObject)\n        .map(({ saga }) => fork(saga)),\n    );\n  };\n\nconst createRootState = <TSlices extends SlicesBase>(slices: TSlices) =>\n  Object.fromEntries(\n    Object.entries(slices).map(([key, { initialState }]) => [\n      key,\n      initialState,\n    ]),\n  ) as PreloadedState<RootState<TSlices>>;\n\nconst createStore = <TSlices extends SlicesBase>(slices: TSlices) => {\n  const rootReducer = createRootReducer(slices);\n  const rootState = createRootState(slices);\n  const rootSaga = createRootSaga(slices);\n  const sagaMiddleware = createSagaMiddleware();\n\n  const composeEnhancer =\n    process.env.NODE_ENV === 'development'\n      ? composeWithDevTools({ trace: true })\n      : compose;\n\n  const enhancer = composeEnhancer(applyMiddleware(sagaMiddleware));\n  const store = reduxCreateStore<RootState<TSlices>, AnyAction, {}, {}>(\n    rootReducer,\n    rootState,\n    enhancer,\n  );\n  sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default createStore;\n\ntype SlicesBase = Record<\n  string,\n  SliceObject<string, any, any> | ReducerObject<string, any>\n>;\n\ntype RootState<TSlices extends SlicesBase> = {\n  [k in keyof TSlices]: TSlices[k]['initialState'];\n};\n","import createStore from 'utils/state/createStore';\nimport ip from './ip';\nimport geoLocation from './geoLocation';\nimport metaWeather from './metaWeather';\n\nconst store = createStore({\n  ip,\n  geoLocation,\n  metaWeather,\n});\n\nexport default store;\nexport type RootState = ReturnType<typeof store['getState']>;\n","import { createMuiTheme } from '@material-ui/core';\nimport blue from '@material-ui/core/colors/blue';\nimport lightBlue from '@material-ui/core/colors/lightBlue';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: blue[500],\n    },\n    secondary: {\n      main: lightBlue['A400'],\n    },\n  },\n  typography: {\n    caption: {\n      fontSize: '0.8125rem',\n    },\n  },\n});\n\nexport default theme;\n","/* eslint-disable import/no-extraneous-dependencies */\nimport { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory({ basename: process.env.PUBLIC_URL });\n\n// eslint-disable-next-line no-console\nconsole.log('basename', process.env.PUBLIC_URL);\n\nexport default history;\n","import { useCallback } from 'react';\nimport { useSnackbar, OptionsObject } from 'notistack';\n\nconst baseToastOptions: OptionsObject = {\n  preventDuplicate: true,\n  anchorOrigin: { vertical: 'top', horizontal: 'center' },\n};\n\nexport const getToastOption = (options?: OptionsObject) => ({\n  ...baseToastOptions,\n  ...options,\n});\n\nconst useToast = () => {\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n  const showToast = useCallback(\n    (message: string, variant: OptionsObject['variant']) =>\n      enqueueSnackbar(message, getToastOption({ variant })),\n    [enqueueSnackbar],\n  );\n\n  const hideToast = useCallback(\n    (key: string | number | undefined) => closeSnackbar(key),\n    [closeSnackbar],\n  );\n\n  return { showToast, hideToast };\n};\n\nexport default useToast;\n","import { FC, memo } from 'react';\nimport { useToastEffect } from './utils';\n\nexport const ToastComponent: FC = () => {\n  useToastEffect();\n  return null;\n};\n\nconst Toast = memo(ToastComponent);\nToast.displayName = 'Toast';\nexport default Toast;\n","import { useEffect } from 'react';\nimport useToast from 'hooks/useToast';\nimport toastService from 'services/toast';\n\nexport const useToastEffect = () => {\n  const { showToast } = useToast();\n\n  useEffect(() => {\n    toastService.addListener(showToast);\n    return () => toastService.removeListener(showToast);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n};\n","import { lazy } from 'react';\nimport { RouteInfo } from 'types/common';\nimport { weatherPaths } from './paths';\n\nconst routes: RouteInfo[] = [\n  /**\n   * DASHBOARD\n   */\n  {\n    ...weatherPaths.dashboard(),\n    component: lazy(() => import('containers/weather/dashboard')),\n  },\n  /**\n   * WEATHERS\n   */\n  {\n    ...weatherPaths.dashboard(),\n    childRoutes: [\n      {\n        ...weatherPaths.weatherSearch(),\n        component: lazy(() => import('containers/weather/weather-search')),\n      },\n      {\n        ...weatherPaths.weatherCity(':woeid'),\n        component: lazy(() => import('containers/weather/weather-city')),\n      },\n    ],\n  },\n];\n\nexport default routes;\n","import LoadingPage from 'components/common/loading-page';\nimport React, { memo, Suspense } from 'react';\nimport { Redirect, Switch, Route } from 'react-router-dom';\nimport { RouteInfo } from 'types/common';\n\nconst flattenRoutes = (routes: RouteInfo[], collectedRoutes: RouteInfo[]) => {\n  routes.forEach((route) => {\n    if (route.childRoutes) {\n      flattenRoutes(route.childRoutes, collectedRoutes);\n    } else {\n      collectedRoutes.push(route);\n    }\n  });\n};\n\nexport const RoutesComponent: React.FC<RoutesProps> = ({ routes }) => {\n  let allRoutes: RouteInfo[] = [];\n  flattenRoutes(routes, allRoutes);\n  return (\n    <Suspense fallback={<LoadingPage />}>\n      <Switch>\n        {allRoutes.map(({ path, exact = true, ...props }) => (\n          <Route {...props} key={path} path={path} exact={exact} />\n        ))}\n        <Redirect from=\"/*\" to=\"/not-found\" />\n      </Switch>\n    </Suspense>\n  );\n};\n\nconst Routes = memo(RoutesComponent);\nRoutes.displayName = 'Routes';\n\nexport default Routes;\n\nexport interface RoutesProps {\n  routes: RouteInfo[];\n}\n","import { makeStyles, createStyles, fade, Theme } from '@material-ui/core';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      position: 'relative',\n      padding: theme.spacing(2, 0),\n      flexGrow: 1,\n    },\n    title: {\n      textDecoration: 'none',\n      color: theme.palette.common.white,\n      display: 'none',\n      [theme.breakpoints.up('sm')]: {\n        display: 'block',\n      },\n    },\n    grow: {\n      flexGrow: 1,\n      [theme.breakpoints.down('xs')]: {\n        display: 'none',\n      },\n    },\n    search: {\n      position: 'relative',\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: fade(theme.palette.common.white, 0.15),\n      '&:hover': {\n        backgroundColor: fade(theme.palette.common.white, 0.25),\n      },\n      marginLeft: 0,\n      width: '100%',\n      [theme.breakpoints.up('sm')]: {\n        marginLeft: theme.spacing(1),\n        width: 'auto',\n      },\n    },\n    searchIcon: {\n      padding: theme.spacing(0, 2),\n      height: '100%',\n      position: 'absolute',\n      pointerEvents: 'none',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    inputRoot: {\n      color: 'inherit',\n    },\n    inputInput: {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n      transition: theme.transitions.create('width'),\n      width: '100%',\n      [theme.breakpoints.up('sm')]: {\n        width: '8em',\n        '&:focus': {\n          width: '14em',\n        },\n      },\n      [theme.breakpoints.down('xs')]: {\n        width: '100%',\n      },\n    },\n  });\n\nconst useStyles = makeStyles(styles, { classNamePrefix: 'WeatherApp' });\n\nexport default useStyles;\n","import React, { memo, useCallback, useEffect } from 'react';\nimport { generatePath, useHistory } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { Box, InputBase, Typography, Toolbar, AppBar } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport routes from 'routes';\nimport Routes from 'routes/Routes';\nimport { weatherPaths } from 'routes/paths';\nimport useQuery from 'hooks/useQuery';\nimport useStyles from './styles';\n\nexport const WeatherAppComponent: React.FC = () => {\n  const inputRef = React.createRef<HTMLInputElement>();\n  const classes = useStyles();\n  const history = useHistory();\n  const query = useQuery();\n  const handleSubmit = useCallback(\n    (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      const searchPath = weatherPaths.weatherSearch({\n        query: (inputRef.current as HTMLInputElement).value,\n      }).path;\n      history.push(searchPath);\n    },\n    [history, inputRef],\n  );\n\n  // Clear input ref if path not on search\n  useEffect(() => {\n    if (inputRef.current && !history.location.pathname.includes('search')) {\n      inputRef.current.value = '';\n    }\n  }, [history.location.pathname, inputRef]);\n  return (\n    <Box data-testid=\"WeatherApp\" className={classes.root}>\n      <AppBar position=\"fixed\">\n        <Toolbar>\n          <Link\n            className={classes.title}\n            to={generatePath(weatherPaths.dashboard().path)}\n          >\n            <Typography variant=\"h6\" noWrap>\n              Weather App\n            </Typography>\n          </Link>\n          <div className={classes.grow} />\n          <div className={classes.search}>\n            <form data-testid=\"searchForm\" onSubmit={handleSubmit}>\n              <div className={classes.searchIcon}>\n                <SearchIcon />\n              </div>\n              <InputBase\n                autoComplete={'off'}\n                placeholder=\"Search city…\"\n                classes={{\n                  root: classes.inputRoot,\n                  input: classes.inputInput,\n                }}\n                inputProps={{\n                  'aria-label': 'search',\n                  'data-testid': 'searchInput',\n                }}\n                name=\"query\"\n                defaultValue={query.query}\n                inputRef={inputRef}\n              />\n            </form>\n          </div>\n        </Toolbar>\n      </AppBar>\n      <Routes routes={routes} />\n    </Box>\n  );\n};\nconst WeatherApp = memo(WeatherAppComponent);\nWeatherApp.displayName = 'WeatherApp';\n\nexport default WeatherApp;\n","import { makeStyles, Theme, createStyles } from '@material-ui/core';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      padding: theme.spacing(8, 3, 0),\n    },\n  });\n\nconst useStyles = makeStyles(styles, { classNamePrefix: 'App' });\n\nexport default useStyles;\n","import { lazy, Suspense } from 'react';\nimport { ThemeProvider, CssBaseline } from '@material-ui/core';\nimport { Provider } from 'react-redux';\nimport { Switch, Router, Route, Redirect } from 'react-router-dom';\nimport { SnackbarProvider } from 'notistack';\n\nimport store from 'states/store';\nimport theme from 'theme';\nimport history from 'routes/history';\nimport Toast from 'components/common/toast';\nimport WeatherApp from 'components/app/weather';\nimport LoadingPage from 'components/common/loading-page';\nimport useStyles from './App.styles';\n\nconst NotFoundPage = lazy(() => import('containers/not-found'));\nconst App: React.FC = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <ThemeProvider theme={theme}>\n        <SnackbarProvider maxSnack={3}>\n          <Provider store={store}>\n            <CssBaseline />\n            <Toast />\n            <Router history={history}>\n              <Suspense fallback={<LoadingPage />}>\n                <Switch>\n                  <Route path=\"/weathers\">\n                    <WeatherApp />\n                  </Route>\n                  <Redirect from=\"/\" to=\"/weathers\" exact />\n                  <Route component={NotFoundPage} />\n                </Switch>\n              </Suspense>\n            </Router>\n          </Provider>\n        </SnackbarProvider>\n      </ThemeProvider>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Integrations } from '@sentry/tracing';\nimport * as Sentry from '@sentry/react';\n\nimport App from './App';\nimport { SENTRY_DSN } from './constants/common';\nimport reportWebVitals from './reportWebVitals';\nimport pkg from '../package.json';\nimport './index.css';\n\nSentry.init({\n  dsn: SENTRY_DSN,\n  autoSessionTracking: true,\n  release: `${pkg.name}-${pkg.version}`,\n  integrations: [new Integrations.BrowserTracing()],\n\n  // We recommend adjusting this value in production, or using tracesSampler\n  // for finer control\n  tracesSampleRate: 0.2,\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// NUMBERS\nexport const NETWORK_TIMEOUT = 30000;\n\n// STRINGS\nexport const NETWORK_TIMEOUT_MESSAGE = 'Network Timeout';\nexport const DATE_FORMAT = 'ddd D MMM';\nexport const TIME_ZONE = 'Asia/Ho_Chi_Minh';\nexport const INVALID_WOEID_MESSAGE = 'Invalid location ID';\nexport const GEO_ACCESS_KEY = process.env.REACT_APP_GEO_ACCESS_KEY ?? '';\nexport const META_WEATHER_PROXY_URL =\n  process.env.REACT_APP_META_WEATHER_PROXY_URL ?? '';\nexport const SENTRY_DSN = process.env.REACT_APP_SENTRY_DSN ?? '';\n","const exhaustedSplitter = /[\\s_-]|(?=[A-Z0-9])/;\n\nconst createTransform = (\n  splitter: string | RegExp,\n  separator: string,\n  transformWord: (word: string) => string,\n) => (text: string) => text.split(splitter).map(transformWord).join(separator);\n\nexport const toKebabCase = createTransform(exhaustedSplitter, '-', (w) =>\n  w.toLowerCase(),\n);\n","import { toKebabCase } from 'utils/string';\n\nexport const createPaths = <TMap extends Record<string, PathRule<any>>>(\n  basename: string,\n  map: TMap,\n) =>\n  (Object.fromEntries(\n    Object.entries(map).map(([key, pathRule]) => {\n      const { title, path, ...rest } = pathRule;\n      return [\n        key,\n        Object.assign((...args: any[]) => {\n          let pathname: string;\n          switch (typeof path) {\n            case 'function':\n              pathname = path(...args);\n              break;\n            case 'string':\n              pathname = path;\n              break;\n            default:\n              pathname = toKebabCase(key);\n              break;\n          }\n          return { ...rest, title, path: `/${basename}/${pathname}` };\n        }, pathRule),\n      ];\n    }),\n  ) as unknown) as {\n    [k in keyof TMap]: PathCreator<PathRuleArgs<TMap[k]>> &\n      PathRule<PathRuleArgs<TMap[k]>>;\n  };\n\nexport interface PathRule<TArgs extends any[]> {\n  title: string;\n  path?: string | ((...args: TArgs) => string);\n}\n\nexport interface PathInfo {\n  title: string;\n  path: string;\n}\n\nexport type PathCreator<TArgs extends any[]> = (...args: TArgs) => PathInfo;\n\ntype PathRuleArgs<TPathRule extends PathRule<any>> = TPathRule['path'] extends (\n  ...args: any[]\n) => any\n  ? Parameters<TPathRule['path']>\n  : [];\n","import { WOEID } from 'types/metaWeather';\nimport { createPaths } from 'utils/routes/paths';\n\nconst createPathWithSearch = (basePath: string, params: object = {}) => {\n  const init = Object.fromEntries(\n    Object.entries(params)\n      .filter(\n        ([, value]) => value !== undefined && value !== null && value !== '',\n      )\n      .map(([key, value]) => [key, String(value)]),\n  );\n  const search = new URLSearchParams(init).toString();\n  return search ? `${basePath}?${search}` : basePath;\n};\n\nexport const weatherPaths = createPaths('weathers', {\n  dashboard: {\n    title: 'Dashboard',\n    path: '',\n  },\n  weatherSearch: {\n    title: 'Weather Search',\n    path: (params?: { query: string }) =>\n      createPathWithSearch('search', params),\n  },\n  weatherCity: {\n    title: 'Weather City',\n    path: (woeid: WOEID) => `${woeid}`,\n  },\n});\n","import { BaseResponse, SuccessResponse, FailResponse } from 'types/common';\n\nexport function isSuccessResponse<TData>(\n  res: BaseResponse<TData>,\n): res is SuccessResponse<TData> {\n  return res.kind === 'success';\n}\n\nexport function isFailedResponse<TData>(\n  res: BaseResponse<TData>,\n): res is FailResponse {\n  return res.kind === 'failed';\n}\n","export class EventListener<TArgs extends any[]> {\n  private listeners: ((...args: TArgs) => void)[] = [];\n\n  addListener(listener: (...args: TArgs) => void) {\n    this.listeners.push(listener);\n  }\n\n  raiseEvent(...args: TArgs) {\n    this.listeners.forEach((listener) => listener?.(...args));\n  }\n\n  removeListener(listener: (...args: TArgs) => void) {\n    const index = this.listeners.findIndex((l) => l === listener);\n    if (index > -1) {\n      this.listeners.splice(index, 1);\n    }\n  }\n}\n","import { OptionsObject } from 'notistack';\nimport { EventListener } from 'services/eventListener';\n\nclass ToastService {\n  private updateEventListener = new EventListener<\n    [string, OptionsObject['variant']]\n  >();\n\n  addListener(\n    listener: (message: string, variant: OptionsObject['variant']) => void,\n  ) {\n    this.updateEventListener.addListener(listener);\n  }\n\n  removeListener(\n    listener: (message: string, variant: OptionsObject['variant']) => void,\n  ) {\n    this.updateEventListener.removeListener(listener);\n  }\n\n  notify(message: string, variant: OptionsObject['variant']) {\n    this.updateEventListener.raiseEvent(message, variant);\n  }\n}\n\nconst toastService = new ToastService();\n\nexport default toastService;\n","import Axios, { AxiosRequestConfig, AxiosInstance, AxiosError } from 'axios';\nimport { BaseResponse, ServiceErrorState, SuccessResponse } from 'types/common';\nimport { NETWORK_TIMEOUT, NETWORK_TIMEOUT_MESSAGE } from 'constants/common';\nimport toastService from './toast';\n\nconst getErrorCodeAndMessage = (error: AxiosError) => ({\n  code: error?.response?.status || 0,\n  message: error.response?.data?.message || error?.message || 'Unknown error',\n});\n\nexport default abstract class BaseService {\n  private readonly instance: AxiosInstance;\n\n  private readonly cachedResponses: Record<\n    string,\n    SuccessResponse<unknown>\n  > = {};\n\n  constructor(config?: AxiosRequestConfig) {\n    this.instance = Axios.create(config);\n  }\n\n  protected requestData = async <TResponseData, TResultData = TResponseData>(\n    {\n      cacheKey,\n      shouldNotifyError = true,\n      shouldNotifySuccess = false,\n      timeout = NETWORK_TIMEOUT,\n      timeoutErrorMessage = NETWORK_TIMEOUT_MESSAGE,\n      ...rest\n    }: BaseRequestConfig,\n    transformData?: TransformData<TResponseData, TResultData>,\n  ): Promise<BaseResponse<TResultData>> => {\n    if (cacheKey) {\n      const cachedRes = this.cachedResponses[cacheKey];\n      if (cachedRes) return cachedRes as SuccessResponse<TResultData>;\n    }\n\n    let code: number;\n    let message: string;\n    let data: unknown;\n\n    try {\n      const res = await this.instance.request<TResponseData>({\n        timeout,\n        timeoutErrorMessage,\n        ...rest,\n      });\n\n      ({ status: code, data } = res);\n\n      if (code.toString().match(/^2\\d{2,5}/)) {\n        const resData = res.data;\n        const resultData = (transformData\n          ? await transformData(resData)\n          : resData) as TResultData;\n\n        if (shouldNotifySuccess) toastService.notify('Success!', 'success');\n\n        const successRes: SuccessResponse<TResultData> = {\n          kind: 'success',\n          data: resultData,\n        };\n\n        if (cacheKey) this.cachedResponses[cacheKey] = successRes;\n\n        return successRes;\n      }\n    } catch (error) {\n      ({ code, message } = getErrorCodeAndMessage(error));\n      data = { code, message };\n      if (shouldNotifyError) toastService.notify(message, 'error');\n    }\n\n    return {\n      kind: 'failed',\n      data: data as ServiceErrorState,\n    };\n  };\n}\n\nexport interface BaseRequestConfig extends AxiosRequestConfig {\n  shouldNotifyError?: boolean;\n  shouldNotifySuccess?: boolean;\n  cacheKey?: string;\n}\n\nexport type TransformData<TFrom, TTo> = (data: TFrom) => TTo | Promise<TTo>;\n","import { Reducer } from 'redux';\nimport { takeLatest, all, fork } from 'redux-saga/effects';\nimport {\n  SliceReducersBase,\n  SliceSettings,\n  SliceObject,\n  PayloadActionCreator,\n  PayloadAction,\n  Actions,\n} from 'types/state';\n\nconst createActionType = (name: string, key: string) => `${name}/${key}`;\n\nconst createSliceObject = <\n  TName extends string,\n  TState,\n  TSliceReducers extends SliceReducersBase<TState>\n>({\n  name,\n  initialState,\n  reducers,\n  workers = {},\n  extraReducer,\n}: SliceSettings<TName, TState, TSliceReducers>): SliceObject<\n  TName,\n  TState,\n  TSliceReducers\n> => {\n  const actions = (Object.fromEntries(\n    Object.keys(reducers).map<[string, PayloadActionCreator<string, any>]>(\n      (key) => {\n        const type = createActionType(name, key);\n        const action = Object.assign((payload: any) => ({ type, payload }), {\n          type,\n        });\n        return [key, action];\n      },\n    ),\n  ) as unknown) as Actions<TState, TSliceReducers>;\n\n  const caseReducers = Object.fromEntries(\n    Object.entries(reducers).map(([key, slicer]) => [\n      createActionType(name, key),\n      slicer,\n    ]),\n  );\n\n  const reducer: Reducer<TState, PayloadAction<string, any>> = (\n    state = initialState,\n    action,\n  ) => {\n    const { type, payload } = action;\n    const reduce = caseReducers[type];\n    const intermediateState = reduce ? reduce(state, payload) : state;\n    return extraReducer?.(intermediateState, action) ?? intermediateState;\n  };\n\n  const saga = function* saga() {\n    yield all(\n      Object.entries(workers)\n        .filter(([, worker]) => Boolean(worker))\n        .map(([key, worker]) => {\n          const type = createActionType(name, key);\n          const watchWorker = function* watch() {\n            yield takeLatest(type, worker!(actions));\n          };\n          return fork(watchWorker);\n        }),\n    );\n  };\n\n  return { name, initialState, actions, reducer, saga };\n};\n\nexport default createSliceObject;\n","import { ReducerSettings, ReducerObject } from 'types/state';\n\nconst createReducerObject = <TName extends string, TState>({\n  name,\n  initialState,\n  reducer,\n}: ReducerSettings<TName, TState>): ReducerObject<TName, TState> => ({\n  name,\n  initialState,\n  reducer,\n});\n\nexport default createReducerObject;\n","import {\n  SliceReducersBase,\n  SliceSettings,\n  SliceObject,\n  ReducerSettings,\n  ReducerObject,\n} from 'types/state';\nimport createSliceObject from './createSliceObject';\nimport createReducerObject from './createReducerObject';\n\nconst isSliceSettings = (\n  settings: SliceSettings<any, any, any> | ReducerSettings<any, any>,\n): settings is SliceSettings<any, any, any> =>\n  !!settings && !!(settings as SliceSettings<any, any, any>).reducers;\n\nfunction createSlice<\n  TName extends string,\n  TState,\n  TSliceReducers extends SliceReducersBase<TState>\n>(\n  settings: SliceSettings<TName, TState, TSliceReducers>,\n): SliceObject<TName, TState, TSliceReducers>;\nfunction createSlice<TName extends string, TState>(\n  settings: ReducerSettings<TName, TState>,\n): ReducerObject<TName, TState>;\nfunction createSlice(\n  settings: SliceSettings<any, any, any> | ReducerSettings<any, any>,\n) {\n  return isSliceSettings(settings)\n    ? createSliceObject(settings)\n    : createReducerObject(settings);\n}\n\nexport default createSlice;\n","import { makeStyles, Theme, createStyles } from '@material-ui/core';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      position: 'relative',\n    },\n    childrenWrapper: {\n      '&$loading': {\n        opacity: 0.5,\n      },\n    },\n    progressWrapper: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      display: 'none',\n      justifyContent: 'center',\n      alignItems: 'center',\n      zIndex: theme.zIndex.modal,\n      '&$loading': {\n        display: 'flex',\n      },\n    },\n    loading: {},\n  });\n\nconst useStyles = makeStyles(styles, { classNamePrefix: 'Spin' });\n\nexport default useStyles;\n","import React, { FC, memo } from 'react';\nimport { CircularProgress } from '@material-ui/core';\nimport { CircularProgressProps } from '@material-ui/core/CircularProgress';\nimport clsx from 'clsx';\nimport useStyles from './styles';\n\nexport const SpinComponent: FC<SpinProps> = ({\n  children,\n  className,\n  color = 'secondary',\n  loading,\n  wrapperClassName,\n  ...props\n}) => {\n  const classes = useStyles();\n\n  return (\n    <div data-testid=\"Spin\" className={clsx(classes.root, className)}>\n      <div\n        className={clsx(classes.childrenWrapper, wrapperClassName, {\n          [classes.loading]: loading,\n        })}\n      >\n        {children}\n      </div>\n      <div\n        className={clsx(classes.progressWrapper, {\n          [classes.loading]: loading,\n        })}\n      >\n        <CircularProgress {...props} color={color} />\n      </div>\n    </div>\n  );\n};\n\nconst Spin = memo(SpinComponent);\nSpin.displayName = 'Spin';\nexport default Spin;\n\nexport interface SpinProps extends CircularProgressProps {\n  children?: React.ReactNode;\n  loading?: boolean;\n  wrapperClassName?: string;\n}\n","import { makeStyles, createStyles, fade, Theme } from '@material-ui/core';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      position: 'fixed',\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      zIndex: 1200,\n      backgroundColor: fade(theme.palette.common.black, 0.3),\n      transition: theme.transitions.create('all'),\n    },\n  });\n\nconst useStyles = makeStyles(styles, { classNamePrefix: 'LoadingPage' });\n\nexport default useStyles;\n","import React, { memo } from 'react';\nimport Spin from 'ui/Spin';\nimport useStyles from './styles';\n\nexport const LoadingPageComponent: React.FC = () => {\n  const classes = useStyles();\n  return (\n    <Spin\n      data-testid=\"LoadingPage\"\n      loading\n      color=\"primary\"\n      className={classes.root}\n      size={72}\n    />\n  );\n};\n\nconst LoadingPage = memo(LoadingPageComponent);\nLoadingPage.displayName = 'LoadingPage';\n\nexport default LoadingPage;\n","import dayjs from 'dayjs';\nimport { DATE_FORMAT, META_WEATHER_PROXY_URL } from 'constants/common';\nimport {\n  WeatherAtLocationData,\n  WeatherSearchLocationData,\n  WOEID,\n} from 'types/metaWeather';\nimport BaseService from './base';\n\nconst today = dayjs().format(DATE_FORMAT);\n\nclass MetaWeatherService extends BaseService {\n  constructor() {\n    super({\n      baseURL: META_WEATHER_PROXY_URL,\n      headers: {\n        authorization: 'fast-nguyen',\n      },\n    });\n  }\n  search = ({ value, field }: SearchLocationPayload) => {\n    const params = new URLSearchParams({\n      [field]: value,\n    });\n    return this.requestData<WeatherSearchLocationData>({\n      url: `/location/search?${params}`,\n      method: 'GET',\n      cacheKey: `${field}:${value}:${today}`,\n    });\n  };\n  get = (woeid: WOEID) => {\n    return this.requestData<WeatherAtLocationData>({\n      url: `/location/${woeid}`,\n      method: 'GET',\n    });\n  };\n}\n\nconst metaWeatherService = new MetaWeatherService();\nexport default metaWeatherService;\n\nexport type SearchLocationField = 'query' | 'lattlong';\nexport interface SearchLocationPayload {\n  value: string;\n  field: SearchLocationField;\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { call, put } from 'redux-saga/effects';\nimport service, { SearchLocationPayload } from 'services/metaWeather';\nimport {\n  WeatherAtLocationData,\n  WeatherSearchLocationData,\n  WeatherState,\n  WOEID,\n} from 'types/metaWeather';\nimport { BaseResponse, ServiceErrorState } from 'types/common';\nimport { isSuccessResponse } from 'utils/common';\nimport createSlice from 'utils/state/createSlice';\n\nconst initialState: WeatherState = {\n  weatherAtLocation: {},\n  weatherSearchLocation: {},\n};\n\nconst metaWeatherSlice = createSlice({\n  name: 'metaWeather',\n  initialState,\n  reducers: {\n    getWeatherAtLocation: (state: WeatherState, _woeid: WOEID) => ({\n      ...state,\n      weatherAtLocation: {\n        ...state.weatherAtLocation,\n        loading: true,\n        message: undefined,\n      },\n    }),\n    resetWeatherSearch: (state: WeatherState) => ({\n      ...state,\n      weatherSearchLocation: {\n        ...state.weatherSearchLocation,\n        data: undefined,\n      },\n    }),\n    resetWeatherAtLocation: (state: WeatherState) => ({\n      ...state,\n      weatherAtLocation: {\n        ...state.weatherAtLocation,\n        data: undefined,\n      },\n    }),\n    getWeatherAtLocationSuccess: (\n      state: WeatherState,\n      weatherAtLocationData: WeatherAtLocationData,\n    ) => ({\n      ...state,\n      weatherAtLocation: {\n        ...state.weatherAtLocation,\n        data: weatherAtLocationData,\n        loading: false,\n        message: undefined,\n      },\n    }),\n    getWeatherAtLocationFailed: (\n      state: WeatherState,\n      errorData: ServiceErrorState,\n    ) => ({\n      ...state,\n      weatherAtLocation: {\n        ...state.weatherAtLocation,\n        ...errorData,\n        data: undefined,\n        loading: false,\n      },\n    }),\n    searchWeatherLocation: (\n      state: WeatherState,\n      _payload: SearchLocationPayload,\n    ) => {\n      return {\n        ...state,\n        weatherSearchLocation: {\n          ...state.weatherSearchLocation,\n          loading: true,\n          message: undefined,\n        },\n      };\n    },\n    searchWeatherLocationSuccess: (\n      state: WeatherState,\n      weatherSearchLocationData: WeatherSearchLocationData,\n    ) => {\n      return {\n        ...state,\n        weatherSearchLocation: {\n          ...state.weatherSearchLocation,\n          data: weatherSearchLocationData,\n          loading: false,\n          message: undefined,\n        },\n      };\n    },\n    searchWeatherLocationFailed: (\n      state: WeatherState,\n      errorData: ServiceErrorState,\n    ) => {\n      return {\n        ...state,\n        weatherSearchLocation: {\n          ...state.weatherSearchLocation,\n          ...errorData,\n          data: undefined,\n          loading: false,\n        },\n      };\n    },\n  },\n  workers: {\n    searchWeatherLocation: ({\n      searchWeatherLocationSuccess,\n      searchWeatherLocationFailed,\n    }) =>\n      function* handleSearchWeatherLocation({ payload }) {\n        const res = (yield call(\n          service.search,\n          payload,\n        )) as BaseResponse<WeatherSearchLocationData>;\n\n        if (isSuccessResponse(res)) {\n          yield put(searchWeatherLocationSuccess(res.data));\n        } else {\n          yield put(searchWeatherLocationFailed(res.data));\n        }\n      },\n    getWeatherAtLocation: ({\n      getWeatherAtLocationSuccess,\n      getWeatherAtLocationFailed,\n    }) =>\n      function* handleGetWeatherAtLocation({ payload: woeid }) {\n        const res = (yield call(\n          service.get,\n          woeid,\n        )) as BaseResponse<WeatherAtLocationData>;\n\n        if (isSuccessResponse(res)) {\n          yield put(getWeatherAtLocationSuccess(res.data));\n        } else {\n          yield put(getWeatherAtLocationFailed(res.data));\n        }\n      },\n  },\n});\n\nexport default metaWeatherSlice;\nexport const { actions: metaWeatherActions } = metaWeatherSlice;\n"],"sourceRoot":""}